Q1.
Finding a Mother Vertex in a Graph
In a small town, there are several locations connected by roads. Each location is represented as a vertex in a directed graph, and the roads between them are directed edges. A "Mother Vertex" is defined as a vertex from which all other vertices in the graph can be reached. The town planner wants to identify if there exists a mother vertex in the town's layout to optimize communication across all locations.



Problem Statement

Given a directed graph, find if there exists a mother vertex in the graph. If it exists, return that vertex; otherwise, return -1.



Input Format

The first line contains two integers V and E, the number of vertices and edges, respectively.
The next EEE lines each contain two integers u and v indicating a directed edge from vertex u to vertex v.


Output Format

Print the mother vertex if it exists, or -1 if no such vertex is found.


Example 1

Sample Input 1

5 5

0 1

0 2

1 3

2 3

3 4



Sample Output 1

0



Explanation

In this graph, starting from vertex 0, all other vertices (1, 2, 3, and 4) can be reached. Therefore, vertex 0 is a mother vertex.



Example 2

Sample Input 2

7 6

0 1

0 2

1 3

2 4

3 5

4 5



Sample Output 2

-1



Explanation

No vertex can reach all other vertices in this directed graph.

CODE:


import sys
from typing import List

def dfs(graph: List[List[int]], visited: List[bool], v: int) -> None:
    visited[v] = True
    for i in range(len(graph)):
        if graph[v][i] == 1 and not visited[i]:
            dfs(graph, visited, i)

def find_mother_vertex(graph: List[List[int]]) -> int:
    visited = [False] * len(graph)
    last_visited = -1
    
    # Run DFS for each vertex
    for i in range(len(graph)):
        if not visited[i]:
            dfs(graph, visited, i)
            last_visited = i  # last visited vertex
    
    # Check if last_visited is a mother vertex
    visited = [False] * len(graph)
    dfs(graph, visited, last_visited)
    
    # If all vertices are visited from last_visited, it's a mother vertex
    for v in visited:
        if not v:
            return -1  # Not a mother vertex
    return last_visited  # Mother vertex found

def main():
    input = sys.stdin.read().split()
    ptr = 0
    V = int(input[ptr])
    ptr += 1
    E = int(input[ptr])
    ptr += 1
    
    # Create an adjacency matrix
    graph = [[0] * V for _ in range(V)]
    
    # Read edges
    for _ in range(E):
        u = int(input[ptr])
        ptr += 1
        v = int(input[ptr])
        ptr += 1
        graph[u][v] = 1  # Directed edge from u to v
    
    # Find and print the mother vertex
    mother_vertex = find_mother_vertex(graph)
    print(mother_vertex)

if __name__ == "__main__":
    main()

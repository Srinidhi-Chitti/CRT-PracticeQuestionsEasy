Q1.
Enciphering Secret Messages for a Security System

A high-tech security company is developing an advanced door locking mechanism that requires enciphered codes for unlocking. Each time a person enters the facility, their unique passcode is enciphered using a specific key. The security system transforms each character in the code to a new character based on the given key.

The character enciphering works as follows:

Each letter of the English alphabet is mapped to a numeric value, where 'a' or 'A' is 0, 'b' or 'B' is 1, ..., and 'z' or 'Z' is 25.
The program then adds the key to this numeric value and wraps around using modulo 26 to stay within the bounds of the alphabet.
The resulting numeric value is converted back into the corresponding letter.
Your task is to write a Java program that takes a character and a key as input, enciphers the character, and outputs the new character.



Input Format

A character ch (either uppercase or lowercase) to be enciphered.
An integer key representing the shift value.


Output Format

Print the new character after enciphering.


Example 1

Sample Input 1

B

10



Sample Output 1

L



Explanation

The value of 'B' is 1 (since 'A' is 0 and 'B' is 1).
Adding the key value of 10 gives 1+10=11.
The character corresponding to the value 11 is 'L'.


Example 2

Sample Input 2

y

5



Sample Output 2

d



Explanation

The value of 'y' is 24 (since 'a' is 0 and 'y' is 24).
Adding the key value of 5 gives 24+5=29. Using modulo 26, 29 mod 26=3.
The character corresponding to the value 3 is 'd'.

CODE:

#include <stdio.h>
#include <ctype.h>

int main() 
{
    char ch;
    int key;

    scanf(" %c", &ch);  // Note the space before %c to skip any whitespace
    scanf("%d", &key);

    int baseCode = isupper(ch) ? 'A' : 'a';

    int originalCode = ch - baseCode;
    int newCode = (originalCode + key) % 26;

    char newChar = (char)(newCode + baseCode);

    printf("%c\n", newChar);

    return 0;
}

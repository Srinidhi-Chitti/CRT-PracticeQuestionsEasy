Q1.
Museum Artifact Arrangement in a Magic Square
A famous museum is organizing a special exhibition where artifacts must be arranged in a unique format called a "Magic Square." A Magic Square is a grid of numbers where the sum of every row, every column, and both main diagonals are equal. The curator needs to check if a given grid arrangement forms a Magic Square to ensure the exhibition is set up correctly.

Write a program to verify if the given arrangement of artifacts forms a Magic Square.



Input Format

The first line of input contains an integer n, which represents the number of rows and columns in the square (n x n grid).
The next n lines contain n integers each, representing the arrangement of artifacts.


Output Format

Print "Yes" if the grid forms a Magic Square.
Print "No" if it does not form a Magic Square.


Example 1

Sample Input 1

3

8 1 6

3 5 7

4 9 2



Sample Output 1

Yes



Explanation

Input Details

The museum has arranged artifacts in a 3x3 grid:

8 1 6

3 5 7

4 9 2

Magic Square Validation

The sum of each row: 8 + 1 + 6 = 15, 3 + 5 + 7 = 15, 4 + 9 + 2 = 15.
The sum of each column: 8 + 3 + 4 = 15, 1 + 5 + 9 = 15, 6 + 7 + 2 = 15.
The sum of both diagonals: 8 + 5 + 2 = 15, 6 + 5 + 4 = 15.
Since all sums are equal, the arrangement forms a Magic Square.


Example 2

Sample Input 2

3

2 7 6

9 5 1

4 3 8



Sample Output 2

Yes



Explanation

Input Details

The museum has arranged artifacts in a 3x3 grid:

2 7 6

9 5 1

4 3 8

Magic Square Validation

The sum of each row: 2 + 7 + 6 = 15, 9 + 5 + 1 = 15, 4 + 3 + 8 = 15.
The sum of each column: 2 + 9 + 4 = 15, 7 + 5 + 3 = 15, 6 + 1 + 8 = 15.
The sum of both diagonals: 2 + 5 + 8 = 15, 6 + 5 + 4 = 15.
Since all sums are equal, the arrangement forms a Magic Square


Example 3

Sample Input 3

3

1 2 3

4 5 6

7 8 9



Sample Output 3

No



Explanation

Input Details

The museum has arranged artifacts in a 3x3 grid:

1 2 3

4 5 6

7 8 9

Magic Square Validation

The sums of the rows, columns, and diagonals are not equal.
Since the sums differ, the arrangement does not form a Magic Square.

CODE:
#include <stdio.h>
#include <stdbool.h>

bool isMagicSquare(int square[10][10], int n) {
    int magicSum = 0;

    // Calculate the sum of the first row
    for (int j = 0; j < n; j++) {
        magicSum += square[0][j];
    }

    // Check sums of each row
    for (int i = 1; i < n; i++) {
        int rowSum = 0;
        for (int j = 0; j < n; j++) {
            rowSum += square[i][j];
        }
        if (rowSum != magicSum) {
            return false;
        }
    }

    // Check sums of each column
    for (int j = 0; j < n; j++) {
        int colSum = 0;
        for (int i = 0; i < n; i++) {
            colSum += square[i][j];
        }
        if (colSum != magicSum) {
            return false;
        }
    }

    // Check sum of main diagonal
    int diag1Sum = 0;
    for (int i = 0; i < n; i++) {
        diag1Sum += square[i][i];
    }
    if (diag1Sum != magicSum) {
        return false;
    }

    // Check sum of secondary diagonal
    int diag2Sum = 0;
    for (int i = 0; i < n; i++) {
        diag2Sum += square[i][n - 1 - i];
    }
    if (diag2Sum != magicSum) {
        return false;
    }

    return true;
}

int main() {
    int n;
    int square[10][10];

    // Read the size of the square
    scanf("%d", &n);

    // Read the elements of the square
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &square[i][j]);
        }
    }

    // Check if it forms a Magic Square
    if (isMagicSquare(square, n)) {
        printf("Yes\n");
    } else {
        printf("No\n");
    }

    return 0;
}

Q3.
Inventory Search
Imagine you are working for a large e-commerce platform that handles a large number of product listings. You are given an inventory sorted by product IDs, and your task is to locate the first and last occurrence of a specific product ID in the sorted list. The product ID appears multiple times, but it is guaranteed to appear at least once.

Your task is to implement a program that finds the first and last position of a given product ID.



Input Format

The first line of input contains an integer n, the number of products in the inventory (length of the sorted array).
The second line contains n integers representing the product IDs in sorted order.
The third line contains the integer target, the product ID you need to find the first and last occurrence of.


Constraints

1 ≤ n ≤ 105
1 ≤ product ID ≤ 106
The array is sorted in non-decreasing order.


Output Format

Print two integers: the first position and the last position of the target product ID in the array.
If the target is not found, print -1 -1.


Example 1

Sample Input 1

8

1 2 2 3 3 3 5 6

3



Sample Output 1

3 5



Explanation

The product ID 3 appears at positions 3, 4, and 5 in the sorted inventory.
The first position of 3 is at index 3, and the last position is at index 5.


Example 2

Sample Input 2

6

1 2 3 3 4 5

2



Sample Output 2

1 1



Explanation

The product ID 2 appears only once in the array at index 1.


Example 3

Sample Input 3

5

1 1 2 2 2

6



Sample Output 3

-1 -1



Explanation

The product ID 6 is not present in the inventory, so the output is -1 -1.


CODE:

def search_first(nums, target):
    left, right = 0, len(nums) - 1
    index = -1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            index = mid
            right = mid - 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return index

def search_last(nums, target):
    left, right = 0, len(nums) - 1
    index = -1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            index = mid
            left = mid + 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return index

n = int(input())
nums = list(map(int, input().split()))
target = int(input())

first_position = search_first(nums, target)
last_position = search_last(nums, target)

print(first_position, last_position)
